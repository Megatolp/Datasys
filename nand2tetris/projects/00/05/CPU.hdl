// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // Instruction :(if c) type 15  ||  ?,?,AorM   || zx,nx,zy,ny,f,no 6-11 || loadA,loadD,WriteM  3-5|| JEQ, JLE, JGE 0-2


    Not(in=instruction[15], out=typeAinst);
    Not(in=typeAinst, out=typeCinst);

    //MEM
    // Load from Memory
        //Do load A?
        And(a=typeCinst, b=instruction[5], out=resToA);
        Or(a=typeAinst, b=resToA, out=loadAFin);
        
        //Choose what to load based on if loadA-bit or a-instruction
        Mux16(a=instruction, b=AlOut, sel=resToA, out=inA);
        ARegister(in=inA, load=loadAFin, out=Aout);

        // Load A or RAM[A] based on a/m bit
        Mux16(a=Aout, b=inM, sel=instruction[12], out=AorMval);

        //D reg
        // IF c instruction and c load bit set load
        And(a=typeCinst, b=instruction[4], out=loadD);
        DRegister(in=AlOut, load=loadD, out=Dval);

    // Write to mem
        And16(a=Aout, b=true, out[0..14]=addressM);
        And16(a=AlOut, b=true, out=outM);
        And(a=typeCinst, b=instruction[3], out=writeM);


    //ALU    
        ALU(x=Dval, y=AorMval, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=AlOut, zr=zr, ng=ng);

    //PC
        //Address jump is outPC, and if loadpc
        And(a=zr, b=instruction[1], out=equals); 
        And(a=ng, b=instruction[2], out=negative); 
        Or(a=equals, b=negative, out=negoreq);

        Or(a=zr, b=ng, out=notpos);
        Not(in=notpos, out=positive);
        And(a=positive, b=instruction[0], out=jumpifpos);

        Or(a=negoreq, b=jumpifpos, out=jumpifc);
        And(a=jumpifc, b=typeCinst, out=jump);


        // Pc reset    
        Not(in=jump, out=notload);
        PC(in=Aout, load=jump, inc=notload, reset=reset, out[0..14]=pc);
    


}